
__global__ void CuKnlInitialiseChunkVertices(
		const int xMax,
		const int yMax,
		const int zMax,
		const double xMin,
		const double yMin,
		const double zMin,
		const double dx,
		const double dy,
		const double dz,
		double* vertexX,
		double* vertexY,
		double* vertexZ,
		double* vertexDx,
		double* vertexDy,
		double* vertexDz)
{
	const int pad = HALO_PAD;
	const int gid = blockIdx.x*blockDim.x+threadIdx.x;

	if(gid < xMax+1)
	{
		vertexX[gid]= xMin+dx*(gid-pad);
		vertexDx[gid] = dx;
	}

	if(gid < yMax+1)
	{
		vertexY[gid] = yMin+dy*(gid-pad);
		vertexDy[gid] = dy;
	}

	if(gid < zMax+1)
	{
		vertexZ[gid] = zMin+dz*(gid-pad);
		vertexDz[gid] = dz;
	}
}

__global__ void CuKnlInitialiseChunk(
		const int xMax,
		const int yMax,
		const int zMax,
		const double dx,
		const double dy,
		const double dz,
		double* vertexX,
		double* vertexY,
		double* vertexZ,
		double* cellX,
		double* cellY,
		double* cellZ,
		double* cellDx,
		double* cellDy,
		double* cellDz,
		double* volume,
		double* xArea,
		double* yArea,
		double* zArea)
{
	const int gid = blockIdx.x*blockDim.x+threadIdx.x;
	const int numCells = xMax*yMax*zMax;

	if(gid < xMax)
	{
		cellX[gid] = 0.5*(vertexX[gid]+vertexX[gid+1]);
		cellDx[gid] = dx;
	}

	if(gid < yMax)
	{
		cellY[gid] = 0.5*(vertexY[gid]+vertexY[gid+1]);
		cellDy[gid] = dy;
	}

	if(gid < zMax)
	{
		cellZ[gid] = 0.5*(vertexZ[gid]+vertexZ[gid+1]);
		cellDz[gid] = dz;
	}

	if(gid < numCells)
	{
		volume[gid] = dx*dy*dz;
	}

	if(gid < numCells+yMax*zMax)
	{
		xArea[gid] = dy*dz;
	}

	if(gid < numCells+xMax*zMax)
	{
		yArea[gid] = dx*dz;
	}

	if(gid < numCells+xMax*yMax)
	{
		zArea[gid] = dx*dy;
	}
}
